---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import Header from "../components/Header";
import "@fontsource/shippori-mincho-b1";
import "@fontsource/cactus-classical-serif";
import { getDays } from "../libs/client";

export interface Props {
  title?: string;
  description?: string;
  thumbnail?: string;
}

const response = await getDays({ limit: 1 });
const timestamps = {
  locals: Astro.locals,
  latestItem: response.contents[0],
};

const {
  title = "翳光臺灣 | Formosa Chiaroscuro",
  description = "台湾で生きる日本人が一日一枚写真を投稿するフォトログ",
  thumbnail = response.contents[0].image.url,
}: Props = Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${thumbnail}?w=1200&h=630`} />
    <meta property="og:url" content={Astro.request.url} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@plus886" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <script is:inline>
      const lastTheme = localStorage.getItem("theme");
      document.documentElement.classList.toggle("dark", lastTheme === "dark");
    </script>
    <ClientRouter />
  </head>
  <body
    class="dark:bg-inky dark:text-pale transition-color text-zinc-800 delay-150 duration-500"
  >
    <div
      id="layout"
      class="h-dvh transition-[grid] delay-150 duration-500 ease-in-out md:grid md:grid-cols-[1fr_5fr]"
    >
      <Header timestamps={timestamps} client:load transition:persist />
      <div class="overflow-auto">
        <slot />
      </div>
    </div>
  </body>
</html>

<script>
  import { isDrawerOpen, theme } from "../libs/stores";

  theme.subscribe((v) => {
    document.documentElement.classList.toggle("dark", v === "dark");
  });

  document.addEventListener("astro:after-swap", () => {
    theme.subscribe((v) => {
      document.documentElement.classList.toggle("dark", v === "dark");
    });
  });

  document.addEventListener("astro:page-load", () => {
    const el = document.getElementById("layout");
    if (isDrawerOpen.get()) {
      isDrawerOpen.set(false);
    }
    isDrawerOpen.subscribe((open) => {
      el?.classList.toggle("md:grid-cols-[1fr_1fr]", open);
      el?.classList.toggle("md:grid-cols-[1fr_5fr]", !open);
      document
        .getElementById("layout")
        ?.classList.toggle("overflow-hidden", open);
      document
        .getElementById("layout")
        ?.classList.toggle("md:overflow-auto", open);
    });
  });
</script>
