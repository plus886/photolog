---
import Layout from "../../layouts/Layout.astro";
import DayNavigation from "../../components/DayNavigation.svelte";
import DayCaption from "../../components/DayCaption.svelte";
import DayDate from "../../components/DayDate.svelte";
import DaySpacer from "../../components/DaySpacer.svelte";
import { getAllDays, getDayDetail } from "../../libs/client";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
  const response = await getAllDays({
    fields: ["id", "date", "publishedAt", "createdAt"],
  });
  return response.map((e, i) => ({
    params: {
      slug: e.slug,
    },
    props: {
      dayId: e.id,
      nextPost: i === 0 ? null : response[i - 1],
      prevPost: i + 1 === response.length ? null : response[i + 1],
    },
  }));
}) satisfies GetStaticPaths;

const { dayId, nextPost, prevPost } = Astro.props;
const item = await getDayDetail(dayId as string);
---

<Layout>
  <section
    class="grid h-[90dvh] grid-rows-[10dvh_1fr_25dvh] items-center justify-center md:h-dvh md:grid-cols-[1fr_3fr_2fr] md:grid-rows-1"
  >
    <DayNavigation
      client:load
      prevSlug={prevPost && prevPost.slug}
      nextSlug={nextPost && nextPost.slug}
    />
    <figure class="flex flex-col items-center justify-center">
      <DaySpacer client:load />
      <img
        src={`${item.image.url}?w=1024`}
        alt={item.slug}
        class="max-h-[50dvh] w-[90dvw] object-contain transition-all md:max-h-[70dvh] md:w-full"
        transition:name={`days_${item.id}_container`}
      />
      <DayCaption camera={item.camera} lens={item.lens} client:load />
    </figure>
    <DayDate date={item.date} client:load />
  </section>
</Layout>
